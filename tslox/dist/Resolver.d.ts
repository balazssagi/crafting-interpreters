import { ExprVisitor, VariableExpr, AssignExpr, BinaryExpr, CallExpr, GroupingExpr, LiteralExpr, UnaryExpr, LogicalExpr, GetExpr, SetExpr, ThisExpr, SuperExpr } from "./Expr";
import { Interpreter } from "./Interpreter";
import { BlockStmt, FunctionStmt, Stmt, StmtVisitor, VarStmt, ExpressionStmt, IfStmt, PrintStmt, ReturnStmt, WhileStmt, ClassStmt } from "./Stmt";
export declare class Resolver implements StmtVisitor<void>, ExprVisitor<void> {
    private interpreter;
    private reportError;
    private scopes;
    private currentFunction;
    private currentClass;
    constructor(interpreter: Interpreter, reportError: (line: number, message: string) => void);
    visitBlockStmt(stmt: BlockStmt): void;
    visitVarStmt(stmt: VarStmt): void;
    visitClassStmt(stmt: ClassStmt): void;
    visitVariableExpr(expr: VariableExpr): void;
    visitAssignExpr(expr: AssignExpr): void;
    visitFunctionStmt(stmt: FunctionStmt): void;
    visitExpressionStmt(stmt: ExpressionStmt): void;
    visitIfStmt(stmt: IfStmt): void;
    visitPrintStmt(stmt: PrintStmt): void;
    visitReturnStmt(stmt: ReturnStmt): void;
    visitWhileStmt(stmt: WhileStmt): void;
    visitBinaryExpr(expr: BinaryExpr): void;
    visitCallExpr(expr: CallExpr): void;
    visitGetExpr(expr: GetExpr): void;
    visitSetExpr(expr: SetExpr): void;
    visitThisExpr(expr: ThisExpr): void;
    visitSuperExpr(expr: SuperExpr): void;
    visitGroupingExpr(expr: GroupingExpr): void;
    visitLiteralExpr(expr: LiteralExpr): void;
    visitLogicalExpr(expr: LogicalExpr): void;
    visitUnaryExpr(expr: UnaryExpr): void;
    private resolveFunction;
    resolveStatements(stmts: Stmt[]): void;
    private declare;
    private define;
    private resolveStatement;
    private resolveExpression;
    private resolveLocal;
    private beginScope;
    private endScope;
}
